name: CI - Tests and Validation

on:
  pull_request:
    branches: [ main, develop, 'release/**' ]
  push:
    branches: [ develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    # Retry automático em caso de falha temporária do Docker Hub
    continue-on-error: false
    strategy:
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Wait for Docker Hub (retry strategy)
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 2
        max_attempts: 3
        retry_wait_seconds: 30
        command: docker pull postgres:15 || true
        warning_on_retry: true
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Prisma migrations
      run: DATABASE_URL="postgresql://test:1234@localhost:5433/test" npx prisma migrate dev --name init

    - name: Run linting
      run: npx biome check .

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run tests with coverage
      run: npm run test:coverage

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/

  # Deploy é feito pelo workflow deploy-cloudrun.yml
  # Este workflow foca apenas em validação e testes
