#!/bin/bash

# Script para configurar CI/CD com GitHub Actions
# Uso: ./setup-cicd.sh

set -e

PROJECT_ID="node-apis-475620"
SA_NAME="github-actions"
SA_EMAIL="${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"
KEY_FILE="github-actions-key.json"

GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}üîß Configurando CI/CD para GitHub Actions...${NC}\n"

# 1. Verificar se service account j√° existe
echo -e "${GREEN}1Ô∏è‚É£  Verificando Service Account...${NC}"
if gcloud iam service-accounts describe ${SA_EMAIL} --project=${PROJECT_ID} 2>/dev/null; then
  echo -e "${YELLOW}‚ö†Ô∏è  Service Account j√° existe.${NC}"
else
  echo "Criando Service Account..."
  gcloud iam service-accounts create ${SA_NAME} \
    --display-name="GitHub Actions Deploy" \
    --project=${PROJECT_ID}
  echo -e "${GREEN}‚úÖ Service Account criada!${NC}"
fi

# 2. Configurar permiss√µes
echo -e "\n${GREEN}2Ô∏è‚É£  Configurando permiss√µes...${NC}"

ROLES=(
  "roles/run.admin"
  "roles/storage.admin"
  "roles/cloudsql.client"
  "roles/iam.serviceAccountUser"
  "roles/secretmanager.secretAccessor"
  "roles/artifactregistry.writer"
)

for role in "${ROLES[@]}"; do
  echo "Adicionando role: $role"
  gcloud projects add-iam-policy-binding ${PROJECT_ID} \
    --member="serviceAccount:${SA_EMAIL}" \
    --role="$role" \
    --condition=None \
    --quiet 2>/dev/null || echo "  (j√° existe)"
done

echo -e "${GREEN}‚úÖ Permiss√µes configuradas!${NC}"

# 3. Criar chave JSON
echo -e "\n${GREEN}3Ô∏è‚É£  Gerando chave JSON...${NC}"
if [ -f "$KEY_FILE" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è  Arquivo $KEY_FILE j√° existe. Removendo...${NC}"
  rm -f $KEY_FILE
fi

gcloud iam service-accounts keys create ${KEY_FILE} \
  --iam-account=${SA_EMAIL} \
  --project=${PROJECT_ID}

echo -e "${GREEN}‚úÖ Chave criada: ${KEY_FILE}${NC}"

# 4. Obter informa√ß√µes necess√°rias
echo -e "\n${GREEN}4Ô∏è‚É£  Coletando informa√ß√µes...${NC}"

CONNECTION_NAME=$(gcloud sql instances describe rpg-system-db \
  --format='value(connectionName)' \
  --project=${PROJECT_ID} 2>/dev/null || echo "N/A")

# 5. Mostrar instru√ß√µes
echo -e "\n${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${BLUE}üìã PR√ìXIMOS PASSOS - Configurar GitHub Secrets${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"

echo -e "V√° em: ${GREEN}Settings ‚Üí Secrets and variables ‚Üí Actions${NC}"
echo -e "E crie os seguintes secrets:\n"

echo -e "${YELLOW}1. GCP_PROJECT_ID${NC}"
echo -e "   Valor: ${GREEN}${PROJECT_ID}${NC}\n"

echo -e "${YELLOW}2. GCP_SA_KEY${NC}"
echo -e "   Valor: Cole o conte√∫do completo do arquivo ${GREEN}${KEY_FILE}${NC}"
echo -e "   Copie com: ${BLUE}cat ${KEY_FILE}${NC}\n"

echo -e "${YELLOW}3. CLOUD_SQL_INSTANCE${NC}"
if [ "$CONNECTION_NAME" != "N/A" ]; then
  echo -e "   Valor: ${GREEN}${CONNECTION_NAME}${NC}\n"
else
  echo -e "   ${YELLOW}‚ö†Ô∏è  Cloud SQL n√£o encontrado. Configure manualmente.${NC}\n"
fi

echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}\n"

# 6. Copiar chave para clipboard (se xclip estiver dispon√≠vel)
if command -v xclip &> /dev/null; then
  cat ${KEY_FILE} | xclip -selection clipboard
  echo -e "${GREEN}‚úÖ Conte√∫do da chave copiado para √°rea de transfer√™ncia!${NC}\n"
fi

# 7. Instru√ß√µes finais
echo -e "${BLUE}üìù Depois de configurar os secrets no GitHub:${NC}"
echo -e "   1. Fa√ßa commit e push"
echo -e "   2. O deploy acontecer√° automaticamente!"
echo -e "   3. Veja o progresso em: ${GREEN}GitHub ‚Üí Actions${NC}\n"

echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANTE:${NC}"
echo -e "   Depois de adicionar a chave ao GitHub,"
echo -e "   delete o arquivo local:"
echo -e "   ${BLUE}rm ${KEY_FILE}${NC}\n"

echo -e "${GREEN}‚úÖ Configura√ß√£o CI/CD conclu√≠da!${NC}"
